--------------------------------------------------------------------------------
Program source code organization
--------------------------------
The program source code consists in the main.cpp file, the main library source
code files, the 3rd party libraries source code, and the unit tests source code.

Program binary organization
---------------------------
The program is unit tested using the Boost.Test framework. As this framework
provides its own main() function, I had to remove Phud's main() function from
the tested code, thus creating two executables: one for the main() function,
and one for the unit tests, and one library for the rest of the program source
code.
The sqlite source code is build in its own library because it is C code that is
not compatible with C++.
The program executable, phud.exe (on Windows), is built from main.cpp and then
linked with the different libraries: main.lib, sqlite3.lib, the different Boost
libs and the different fltk libs.
The build system configuration files are generated by CMake using the provided
CMakeLists.txt file.

The program is designed to be statically linked with its libraries.
--------------------------------------------------------------------------------
About SQLite
------------
SQLite is built from source (i.e. the source is included in the hud project
source). sqlite3.h et sqlite3.c are the two only needed files, because 
sqlite3ext.h is used for writing extensions and shell.c is used to build command
lie tools.
For usage, see http://www.sqlite.org/quickstart.html
Got code from http://www.sqlite.org/download.html
--------------------------------------------------------------------------------
About FLTK
----------
to build with cmake + Visual Studio:
mkdir build
cmake ../fltk
in CMakeCache.txt, replace /MD by /MT -> uses static link
cmake ../fltk
build in Visual Studio
--------------------------------------------------------------------------------
About Boost
-----------
For information on Boost libraries built for Visual Studio,
The "lib" prefix is for static libraries (i.e. needed at compile time).
The 's' letter is to use statically linked C runtime.
The 'd' is debug.
The 'g' is using debug runtime.
--------------------------------------------------------------------------------
About spdlog
------------
Got code from https://github.com/gabime/spdlog/releases
--------------------------------------------------------------------------------
About utf-8 cpp
------------
Got code from https://github.com/nemtrif/utfcpp/releases
--------------------------------------------------------------------------------
About Visual Studio
-------------------
It is recommended to use the /utf-8 compiler switch, so that the source and 
executable character sets are considered as UTF-8, and do not depend on the 
current user code page. See
https://msdn.microsoft.com/en-us/library/mt708821.aspx
--------------------------------------------------------------------------------
Functionnal specification
---------------------------------
lecture de la log
sauvegarde en base de données
 SQLLite
lecture de la base
création des stats
détection des joueurs en présence à la table
affichage des stats par joueur
mise à jour de la base régulièrement
mise à jour des stats régulièrement

au démarrage,
si abscence de hup.db, création + import complet
si présence, ouverture + lecture et création du Site tel que sauvegardé puis 
import partiel:
pour chaque jeu, regarder la date de la dernière main jouée.
pour chaque main, si jeu sauvegardé et date postérieure alors on crée la main
si jeu déjà existant on ne s'intéresse qu'aux mains postérieures à la dernière
sauvegardée.

Une table est toujours définie par son nom : pour détecter les joueurs d'une table,
phud compte sur l'utilisateur pour lui indiquer quelle fenêtre windows est la table.

Structure of a Winamax history file
-----------------------------------
Logique de parsage de l'historique :
1 fichier = une partie d'un type de jeu.

table Game = Id, Room, Type (Tournament|Cash), Name (Double or Nothing), buyin, variant (HNL|PLO), currentPrice, date
--------------------------------------------------------------------------------
Statistics we want to compute
-----------------------------
 voluntary put in pot par joueur
 pre flop raise par joueur
 nb mains jouées contre chaque joueur
 agressivité moyenne ?
 pourcentage de squeeze (relance preflop avec 1 relance callée)
 pourcentage de 3bet preflop
 pourcentage de fold to 3bet preflop
 pourcentage de continuation bet au flop
 pourcentage de fold to continuation bet au flop
 pourcentage de bet turn
 pourcentage de bet river
 pourcentage de fold to bet au turn
 pourcentage de fold to bet à la river
 
Les statistiques que vous allez utiliser preflop :

VPIP
PFR
Attempt to steal preflop (tente de voler les blinds preflop)
3bet preflop
Fold to 3bet preflop (se couche en cas de surrelance)
4bet preflop
 

Les statistiques que vous allez utiliser postflop :

Cbet flop
Donkbet flop
Fold to Cbet flop (se couche en cas de Cbet adverse)
2nd barrel
3rd barrel
 

Statistiques plus générales :

W$WSF : pourcentage de fois où on gagne des $ en ayant vu le flop
WTSD : pourcentage de fois où on voit l'abattage en ayant vu le flop
W$SD : pourcentage de fois où on gagne de l'argent à l'abattage
--------------------------------------------------------------------------------